type ToDo {
  id: ID!
  name: String!
  creator: String!
  comments: String
  sampleJson: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelToDoConnection {
  items: [ToDo]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelToDoFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  creator: ModelStringFilterInput
  comments: ModelStringFilterInput
  sampleJson: ModelStringFilterInput
  and: [ModelToDoFilterInput]
  or: [ModelToDoFilterInput]
  not: ModelToDoFilterInput
}

type Query {
  getToDo(id: ID!): ToDo
  listToDos(filter: ModelToDoFilterInput, limit: Int, nextToken: String): ModelToDoConnection
}

input CreateToDoInput {
  id: ID
  name: String!
  creator: String!
  comments: String
  sampleJson: AWSJSON
}

input UpdateToDoInput {
  id: ID!
  name: String
  creator: String
  comments: String
  sampleJson: AWSJSON
}

input DeleteToDoInput {
  id: ID
}

type Mutation {
  createToDo(input: CreateToDoInput!): ToDo
  updateToDo(input: UpdateToDoInput!): ToDo
  deleteToDo(input: DeleteToDoInput!): ToDo
}

type Subscription {
  onCreateToDo: ToDo @aws_subscribe(mutations: ["createToDo"])
  onUpdateToDo: ToDo @aws_subscribe(mutations: ["updateToDo"])
  onDeleteToDo: ToDo @aws_subscribe(mutations: ["deleteToDo"])
}
